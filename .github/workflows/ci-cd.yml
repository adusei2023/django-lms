name: Django CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Set up environment variables
      run: |
        echo "DEBUG=True" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV
        echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_db" >> $GITHUB_ENV
        echo "ALLOWED_HOSTS=localhost,127.0.0.1" >> $GITHUB_ENV
    
    - name: Run migrations
      run: |
        python manage.py migrate --noinput
    
    - name: Run tests with coverage
      run: |
        coverage run --source='.' manage.py test --parallel
        coverage report
        coverage xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort
    
    - name: Run flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=migrations,venv,env,.venv
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --exclude=migrations,venv,env,.venv
    
    - name: Check code formatting with black
      run: |
        black --check . --exclude="/(migrations|venv|env|\.venv)/"
    
    - name: Check import sorting with isort
      run: |
        isort --check-only . --skip migrations --skip venv --skip env --skip .venv

  security:
    name: Security Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety bandit
    
    - name: Check for security vulnerabilities in dependencies
      run: |
        safety check --json || true
    
    - name: Run bandit security scan
      run: |
        bandit -r . -x ./venv,./env,./.venv,./tests -f json || true
    
    - name: Django deployment check
      run: |
        export SECRET_KEY=test-secret-key-for-ci
        export DEBUG=False
        export DATABASE_URL=sqlite:///test.db
        export ALLOWED_HOSTS=localhost
        python manage.py check --deploy --fail-level WARNING

  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: false
        tags: django-lms:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        docker run --rm -e DEBUG=True -e SECRET_KEY=test django-lms:latest python manage.py check

  # Uncomment to enable automatic deployment
  # deploy:
  #   name: Deploy to Production
  #   runs-on: ubuntu-latest
  #   needs: [test, lint, security, build-docker]
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'
  #   
  #   steps:
  #   - uses: actions/checkout@v3
  #   
  #   - name: Deploy to AWS Elastic Beanstalk
  #     uses: einaregilsson/beanstalk-deploy@v21
  #     with:
  #       aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #       application_name: django-lms
  #       environment_name: django-lms-prod
  #       version_label: ${{ github.sha }}
  #       region: us-east-1
  #       deployment_package: deploy.zip
